/* @generated by `@turnkey/fetchers`. DO NOT EDIT BY HAND */

import {
  request,
  signedRequest,
  TurnkeyCredentialRequestOptions,
} from "../../../../../base";
import type { operations } from "./public_api.types";

/**
 * `POST /public/v1/query/get_activity`
 */
export type TGetActivityResponse =
  operations["PublicApiService_GetActivity"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/query/get_activity`
 */
export type TGetActivityInput = { body: TGetActivityBody };

/**
 * `POST /public/v1/query/get_activity`
 */
export type TGetActivityBody =
  operations["PublicApiService_GetActivity"]["parameters"]["body"]["body"];

/**
 * Get Activity
 *
 * Get details about an Activity
 *
 * `POST /public/v1/query/get_activity`
 */
export const getActivity = (input: TGetActivityInput) =>
  request<TGetActivityResponse, TGetActivityBody, never, never, never>({
    uri: "/public/v1/query/get_activity",
    method: "POST",
    body: input.body,
  });

/**
 * Request a WebAuthn assertion and return a signed `GetActivity` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetActivity}
 */
export const signGetActivity = (
  input: TGetActivityInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  signedRequest<TGetActivityBody, never, never>({
    uri: "/public/v1/query/get_activity",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/query/get_authenticator`
 */
export type TGetAuthenticatorResponse =
  operations["PublicApiService_GetAuthenticator"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/query/get_authenticator`
 */
export type TGetAuthenticatorInput = { body: TGetAuthenticatorBody };

/**
 * `POST /public/v1/query/get_authenticator`
 */
export type TGetAuthenticatorBody =
  operations["PublicApiService_GetAuthenticator"]["parameters"]["body"]["body"];

/**
 * Get Authenticator
 *
 * Get details about an authenticator
 *
 * `POST /public/v1/query/get_authenticator`
 */
export const getAuthenticator = (input: TGetAuthenticatorInput) =>
  request<
    TGetAuthenticatorResponse,
    TGetAuthenticatorBody,
    never,
    never,
    never
  >({
    uri: "/public/v1/query/get_authenticator",
    method: "POST",
    body: input.body,
  });

/**
 * Request a WebAuthn assertion and return a signed `GetAuthenticator` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetAuthenticator}
 */
export const signGetAuthenticator = (
  input: TGetAuthenticatorInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  signedRequest<TGetAuthenticatorBody, never, never>({
    uri: "/public/v1/query/get_authenticator",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/query/get_authenticators`
 */
export type TGetAuthenticatorsResponse =
  operations["PublicApiService_GetAuthenticators"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/query/get_authenticators`
 */
export type TGetAuthenticatorsInput = { body: TGetAuthenticatorsBody };

/**
 * `POST /public/v1/query/get_authenticators`
 */
export type TGetAuthenticatorsBody =
  operations["PublicApiService_GetAuthenticators"]["parameters"]["body"]["body"];

/**
 * Get Authenticators
 *
 * Get details about authenticators for a user
 *
 * `POST /public/v1/query/get_authenticators`
 */
export const getAuthenticators = (input: TGetAuthenticatorsInput) =>
  request<
    TGetAuthenticatorsResponse,
    TGetAuthenticatorsBody,
    never,
    never,
    never
  >({
    uri: "/public/v1/query/get_authenticators",
    method: "POST",
    body: input.body,
  });

/**
 * Request a WebAuthn assertion and return a signed `GetAuthenticators` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetAuthenticators}
 */
export const signGetAuthenticators = (
  input: TGetAuthenticatorsInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  signedRequest<TGetAuthenticatorsBody, never, never>({
    uri: "/public/v1/query/get_authenticators",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/query/get_organization`
 */
export type TGetOrganizationResponse =
  operations["PublicApiService_GetOrganization"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/query/get_organization`
 */
export type TGetOrganizationInput = { body: TGetOrganizationBody };

/**
 * `POST /public/v1/query/get_organization`
 */
export type TGetOrganizationBody =
  operations["PublicApiService_GetOrganization"]["parameters"]["body"]["body"];

/**
 * Get Organization
 *
 * Get details about an Organization
 *
 * `POST /public/v1/query/get_organization`
 */
export const getOrganization = (input: TGetOrganizationInput) =>
  request<TGetOrganizationResponse, TGetOrganizationBody, never, never, never>({
    uri: "/public/v1/query/get_organization",
    method: "POST",
    body: input.body,
  });

/**
 * Request a WebAuthn assertion and return a signed `GetOrganization` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetOrganization}
 */
export const signGetOrganization = (
  input: TGetOrganizationInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  signedRequest<TGetOrganizationBody, never, never>({
    uri: "/public/v1/query/get_organization",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/query/get_policy`
 */
export type TGetPolicyResponse =
  operations["PublicApiService_GetPolicy"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/query/get_policy`
 */
export type TGetPolicyInput = { body: TGetPolicyBody };

/**
 * `POST /public/v1/query/get_policy`
 */
export type TGetPolicyBody =
  operations["PublicApiService_GetPolicy"]["parameters"]["body"]["body"];

/**
 * Get Policy
 *
 * Get details about a Policy
 *
 * `POST /public/v1/query/get_policy`
 */
export const getPolicy = (input: TGetPolicyInput) =>
  request<TGetPolicyResponse, TGetPolicyBody, never, never, never>({
    uri: "/public/v1/query/get_policy",
    method: "POST",
    body: input.body,
  });

/**
 * Request a WebAuthn assertion and return a signed `GetPolicy` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetPolicy}
 */
export const signGetPolicy = (
  input: TGetPolicyInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  signedRequest<TGetPolicyBody, never, never>({
    uri: "/public/v1/query/get_policy",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/query/get_private_key`
 */
export type TGetPrivateKeyResponse =
  operations["PublicApiService_GetPrivateKey"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/query/get_private_key`
 */
export type TGetPrivateKeyInput = { body: TGetPrivateKeyBody };

/**
 * `POST /public/v1/query/get_private_key`
 */
export type TGetPrivateKeyBody =
  operations["PublicApiService_GetPrivateKey"]["parameters"]["body"]["body"];

/**
 * Get Private Key
 *
 * Get details about a Private Key
 *
 * `POST /public/v1/query/get_private_key`
 */
export const getPrivateKey = (input: TGetPrivateKeyInput) =>
  request<TGetPrivateKeyResponse, TGetPrivateKeyBody, never, never, never>({
    uri: "/public/v1/query/get_private_key",
    method: "POST",
    body: input.body,
  });

/**
 * Request a WebAuthn assertion and return a signed `GetPrivateKey` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetPrivateKey}
 */
export const signGetPrivateKey = (
  input: TGetPrivateKeyInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  signedRequest<TGetPrivateKeyBody, never, never>({
    uri: "/public/v1/query/get_private_key",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/query/get_user`
 */
export type TGetUserResponse =
  operations["PublicApiService_GetUser"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/query/get_user`
 */
export type TGetUserInput = { body: TGetUserBody };

/**
 * `POST /public/v1/query/get_user`
 */
export type TGetUserBody =
  operations["PublicApiService_GetUser"]["parameters"]["body"]["body"];

/**
 * Get User
 *
 * Get details about a User
 *
 * `POST /public/v1/query/get_user`
 */
export const getUser = (input: TGetUserInput) =>
  request<TGetUserResponse, TGetUserBody, never, never, never>({
    uri: "/public/v1/query/get_user",
    method: "POST",
    body: input.body,
  });

/**
 * Request a WebAuthn assertion and return a signed `GetUser` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetUser}
 */
export const signGetUser = (
  input: TGetUserInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  signedRequest<TGetUserBody, never, never>({
    uri: "/public/v1/query/get_user",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/query/list_activities`
 */
export type TGetActivitiesResponse =
  operations["PublicApiService_GetActivities"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/query/list_activities`
 */
export type TGetActivitiesInput = { body: TGetActivitiesBody };

/**
 * `POST /public/v1/query/list_activities`
 */
export type TGetActivitiesBody =
  operations["PublicApiService_GetActivities"]["parameters"]["body"]["body"];

/**
 * List Activities
 *
 * List all Activities within an Organization
 *
 * `POST /public/v1/query/list_activities`
 */
export const getActivities = (input: TGetActivitiesInput) =>
  request<TGetActivitiesResponse, TGetActivitiesBody, never, never, never>({
    uri: "/public/v1/query/list_activities",
    method: "POST",
    body: input.body,
  });

/**
 * Request a WebAuthn assertion and return a signed `GetActivities` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetActivities}
 */
export const signGetActivities = (
  input: TGetActivitiesInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  signedRequest<TGetActivitiesBody, never, never>({
    uri: "/public/v1/query/list_activities",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/query/list_policies`
 */
export type TGetPoliciesResponse =
  operations["PublicApiService_GetPolicies"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/query/list_policies`
 */
export type TGetPoliciesInput = { body: TGetPoliciesBody };

/**
 * `POST /public/v1/query/list_policies`
 */
export type TGetPoliciesBody =
  operations["PublicApiService_GetPolicies"]["parameters"]["body"]["body"];

/**
 * List Policies
 *
 * List all Policies within an Organization
 *
 * `POST /public/v1/query/list_policies`
 */
export const getPolicies = (input: TGetPoliciesInput) =>
  request<TGetPoliciesResponse, TGetPoliciesBody, never, never, never>({
    uri: "/public/v1/query/list_policies",
    method: "POST",
    body: input.body,
  });

/**
 * Request a WebAuthn assertion and return a signed `GetPolicies` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetPolicies}
 */
export const signGetPolicies = (
  input: TGetPoliciesInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  signedRequest<TGetPoliciesBody, never, never>({
    uri: "/public/v1/query/list_policies",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/query/list_private_keys`
 */
export type TGetPrivateKeysResponse =
  operations["PublicApiService_GetPrivateKeys"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/query/list_private_keys`
 */
export type TGetPrivateKeysInput = { body: TGetPrivateKeysBody };

/**
 * `POST /public/v1/query/list_private_keys`
 */
export type TGetPrivateKeysBody =
  operations["PublicApiService_GetPrivateKeys"]["parameters"]["body"]["body"];

/**
 * List Private Keys
 *
 * List all Private Keys within an Organization
 *
 * `POST /public/v1/query/list_private_keys`
 */
export const getPrivateKeys = (input: TGetPrivateKeysInput) =>
  request<TGetPrivateKeysResponse, TGetPrivateKeysBody, never, never, never>({
    uri: "/public/v1/query/list_private_keys",
    method: "POST",
    body: input.body,
  });

/**
 * Request a WebAuthn assertion and return a signed `GetPrivateKeys` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetPrivateKeys}
 */
export const signGetPrivateKeys = (
  input: TGetPrivateKeysInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  signedRequest<TGetPrivateKeysBody, never, never>({
    uri: "/public/v1/query/list_private_keys",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/query/list_users`
 */
export type TGetUsersResponse =
  operations["PublicApiService_GetUsers"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/query/list_users`
 */
export type TGetUsersInput = { body: TGetUsersBody };

/**
 * `POST /public/v1/query/list_users`
 */
export type TGetUsersBody =
  operations["PublicApiService_GetUsers"]["parameters"]["body"]["body"];

/**
 * List Users
 *
 * List all Users within an Organization
 *
 * `POST /public/v1/query/list_users`
 */
export const getUsers = (input: TGetUsersInput) =>
  request<TGetUsersResponse, TGetUsersBody, never, never, never>({
    uri: "/public/v1/query/list_users",
    method: "POST",
    body: input.body,
  });

/**
 * Request a WebAuthn assertion and return a signed `GetUsers` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetUsers}
 */
export const signGetUsers = (
  input: TGetUsersInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  signedRequest<TGetUsersBody, never, never>({
    uri: "/public/v1/query/list_users",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/query/whoami`
 */
export type TGetWhoamiResponse =
  operations["PublicApiService_GetWhoami"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/query/whoami`
 */
export type TGetWhoamiInput = { body: TGetWhoamiBody };

/**
 * `POST /public/v1/query/whoami`
 */
export type TGetWhoamiBody =
  operations["PublicApiService_GetWhoami"]["parameters"]["body"]["body"];

/**
 * Who am I?
 *
 * Get basic information about your current API or WebAuthN user and their organization. Affords Sub-Organization look ups via Parent Organization for WebAuthN users.
 *
 * `POST /public/v1/query/whoami`
 */
export const getWhoami = (input: TGetWhoamiInput) =>
  request<TGetWhoamiResponse, TGetWhoamiBody, never, never, never>({
    uri: "/public/v1/query/whoami",
    method: "POST",
    body: input.body,
  });

/**
 * Request a WebAuthn assertion and return a signed `GetWhoami` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetWhoami}
 */
export const signGetWhoami = (
  input: TGetWhoamiInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  signedRequest<TGetWhoamiBody, never, never>({
    uri: "/public/v1/query/whoami",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/submit/approve_activity`
 */
export type TApproveActivityResponse =
  operations["PublicApiService_ApproveActivity"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/submit/approve_activity`
 */
export type TApproveActivityInput = { body: TApproveActivityBody };

/**
 * `POST /public/v1/submit/approve_activity`
 */
export type TApproveActivityBody =
  operations["PublicApiService_ApproveActivity"]["parameters"]["body"]["body"];

/**
 * Approve Activity
 *
 * Approve an Activity
 *
 * `POST /public/v1/submit/approve_activity`
 */
export const approveActivity = (input: TApproveActivityInput) =>
  request<TApproveActivityResponse, TApproveActivityBody, never, never, never>({
    uri: "/public/v1/submit/approve_activity",
    method: "POST",
    body: input.body,
  });

/**
 * Request a WebAuthn assertion and return a signed `ApproveActivity` request, ready to be POSTed to Turnkey.
 *
 * See {@link ApproveActivity}
 */
export const signApproveActivity = (
  input: TApproveActivityInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  signedRequest<TApproveActivityBody, never, never>({
    uri: "/public/v1/submit/approve_activity",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/submit/create_api_keys`
 */
export type TCreateApiKeysResponse =
  operations["PublicApiService_CreateApiKeys"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/submit/create_api_keys`
 */
export type TCreateApiKeysInput = { body: TCreateApiKeysBody };

/**
 * `POST /public/v1/submit/create_api_keys`
 */
export type TCreateApiKeysBody =
  operations["PublicApiService_CreateApiKeys"]["parameters"]["body"]["body"];

/**
 * Create API Keys
 *
 * Add api keys to an existing User
 *
 * `POST /public/v1/submit/create_api_keys`
 */
export const createApiKeys = (input: TCreateApiKeysInput) =>
  request<TCreateApiKeysResponse, TCreateApiKeysBody, never, never, never>({
    uri: "/public/v1/submit/create_api_keys",
    method: "POST",
    body: input.body,
  });

/**
 * Request a WebAuthn assertion and return a signed `CreateApiKeys` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateApiKeys}
 */
export const signCreateApiKeys = (
  input: TCreateApiKeysInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  signedRequest<TCreateApiKeysBody, never, never>({
    uri: "/public/v1/submit/create_api_keys",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/submit/create_api_only_users`
 */
export type TCreateApiOnlyUsersResponse =
  operations["PublicApiService_CreateApiOnlyUsers"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/submit/create_api_only_users`
 */
export type TCreateApiOnlyUsersInput = { body: TCreateApiOnlyUsersBody };

/**
 * `POST /public/v1/submit/create_api_only_users`
 */
export type TCreateApiOnlyUsersBody =
  operations["PublicApiService_CreateApiOnlyUsers"]["parameters"]["body"]["body"];

/**
 * Create API-only Users
 *
 * Create API-only Users in an existing Organization
 *
 * `POST /public/v1/submit/create_api_only_users`
 */
export const createApiOnlyUsers = (input: TCreateApiOnlyUsersInput) =>
  request<
    TCreateApiOnlyUsersResponse,
    TCreateApiOnlyUsersBody,
    never,
    never,
    never
  >({
    uri: "/public/v1/submit/create_api_only_users",
    method: "POST",
    body: input.body,
  });

/**
 * Request a WebAuthn assertion and return a signed `CreateApiOnlyUsers` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateApiOnlyUsers}
 */
export const signCreateApiOnlyUsers = (
  input: TCreateApiOnlyUsersInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  signedRequest<TCreateApiOnlyUsersBody, never, never>({
    uri: "/public/v1/submit/create_api_only_users",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/submit/create_authenticators`
 */
export type TCreateAuthenticatorsResponse =
  operations["PublicApiService_CreateAuthenticators"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/submit/create_authenticators`
 */
export type TCreateAuthenticatorsInput = { body: TCreateAuthenticatorsBody };

/**
 * `POST /public/v1/submit/create_authenticators`
 */
export type TCreateAuthenticatorsBody =
  operations["PublicApiService_CreateAuthenticators"]["parameters"]["body"]["body"];

/**
 * Create Authenticators
 *
 * Create Authenticators to authenticate requests to Turnkey
 *
 * `POST /public/v1/submit/create_authenticators`
 */
export const createAuthenticators = (input: TCreateAuthenticatorsInput) =>
  request<
    TCreateAuthenticatorsResponse,
    TCreateAuthenticatorsBody,
    never,
    never,
    never
  >({
    uri: "/public/v1/submit/create_authenticators",
    method: "POST",
    body: input.body,
  });

/**
 * Request a WebAuthn assertion and return a signed `CreateAuthenticators` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateAuthenticators}
 */
export const signCreateAuthenticators = (
  input: TCreateAuthenticatorsInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  signedRequest<TCreateAuthenticatorsBody, never, never>({
    uri: "/public/v1/submit/create_authenticators",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/submit/create_invitations`
 */
export type TCreateInvitationsResponse =
  operations["PublicApiService_CreateInvitations"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/submit/create_invitations`
 */
export type TCreateInvitationsInput = { body: TCreateInvitationsBody };

/**
 * `POST /public/v1/submit/create_invitations`
 */
export type TCreateInvitationsBody =
  operations["PublicApiService_CreateInvitations"]["parameters"]["body"]["body"];

/**
 * Create Invitations
 *
 * Create Invitations to join an existing Organization
 *
 * `POST /public/v1/submit/create_invitations`
 */
export const createInvitations = (input: TCreateInvitationsInput) =>
  request<
    TCreateInvitationsResponse,
    TCreateInvitationsBody,
    never,
    never,
    never
  >({
    uri: "/public/v1/submit/create_invitations",
    method: "POST",
    body: input.body,
  });

/**
 * Request a WebAuthn assertion and return a signed `CreateInvitations` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateInvitations}
 */
export const signCreateInvitations = (
  input: TCreateInvitationsInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  signedRequest<TCreateInvitationsBody, never, never>({
    uri: "/public/v1/submit/create_invitations",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/submit/create_policy`
 */
export type TCreatePolicyResponse =
  operations["PublicApiService_CreatePolicy"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/submit/create_policy`
 */
export type TCreatePolicyInput = { body: TCreatePolicyBody };

/**
 * `POST /public/v1/submit/create_policy`
 */
export type TCreatePolicyBody =
  operations["PublicApiService_CreatePolicy"]["parameters"]["body"]["body"];

/**
 * Create Policy
 *
 * Create a new Policy
 *
 * `POST /public/v1/submit/create_policy`
 */
export const createPolicy = (input: TCreatePolicyInput) =>
  request<TCreatePolicyResponse, TCreatePolicyBody, never, never, never>({
    uri: "/public/v1/submit/create_policy",
    method: "POST",
    body: input.body,
  });

/**
 * Request a WebAuthn assertion and return a signed `CreatePolicy` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreatePolicy}
 */
export const signCreatePolicy = (
  input: TCreatePolicyInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  signedRequest<TCreatePolicyBody, never, never>({
    uri: "/public/v1/submit/create_policy",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/submit/create_private_key_tag`
 */
export type TCreatePrivateKeyTagResponse =
  operations["PublicApiService_CreatePrivateKeyTag"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/submit/create_private_key_tag`
 */
export type TCreatePrivateKeyTagInput = { body: TCreatePrivateKeyTagBody };

/**
 * `POST /public/v1/submit/create_private_key_tag`
 */
export type TCreatePrivateKeyTagBody =
  operations["PublicApiService_CreatePrivateKeyTag"]["parameters"]["body"]["body"];

/**
 * Create Private Key Tag
 *
 * Create a private key tag and add it to private keys.
 *
 * `POST /public/v1/submit/create_private_key_tag`
 */
export const createPrivateKeyTag = (input: TCreatePrivateKeyTagInput) =>
  request<
    TCreatePrivateKeyTagResponse,
    TCreatePrivateKeyTagBody,
    never,
    never,
    never
  >({
    uri: "/public/v1/submit/create_private_key_tag",
    method: "POST",
    body: input.body,
  });

/**
 * Request a WebAuthn assertion and return a signed `CreatePrivateKeyTag` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreatePrivateKeyTag}
 */
export const signCreatePrivateKeyTag = (
  input: TCreatePrivateKeyTagInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  signedRequest<TCreatePrivateKeyTagBody, never, never>({
    uri: "/public/v1/submit/create_private_key_tag",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/submit/create_private_keys`
 */
export type TCreatePrivateKeysResponse =
  operations["PublicApiService_CreatePrivateKeys"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/submit/create_private_keys`
 */
export type TCreatePrivateKeysInput = { body: TCreatePrivateKeysBody };

/**
 * `POST /public/v1/submit/create_private_keys`
 */
export type TCreatePrivateKeysBody =
  operations["PublicApiService_CreatePrivateKeys"]["parameters"]["body"]["body"];

/**
 * Create Private Keys
 *
 * Create new Private Keys
 *
 * `POST /public/v1/submit/create_private_keys`
 */
export const createPrivateKeys = (input: TCreatePrivateKeysInput) =>
  request<
    TCreatePrivateKeysResponse,
    TCreatePrivateKeysBody,
    never,
    never,
    never
  >({
    uri: "/public/v1/submit/create_private_keys",
    method: "POST",
    body: input.body,
  });

/**
 * Request a WebAuthn assertion and return a signed `CreatePrivateKeys` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreatePrivateKeys}
 */
export const signCreatePrivateKeys = (
  input: TCreatePrivateKeysInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  signedRequest<TCreatePrivateKeysBody, never, never>({
    uri: "/public/v1/submit/create_private_keys",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/submit/create_sub_organization`
 */
export type TCreateSubOrganizationResponse =
  operations["PublicApiService_CreateSubOrganization"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/submit/create_sub_organization`
 */
export type TCreateSubOrganizationInput = { body: TCreateSubOrganizationBody };

/**
 * `POST /public/v1/submit/create_sub_organization`
 */
export type TCreateSubOrganizationBody =
  operations["PublicApiService_CreateSubOrganization"]["parameters"]["body"]["body"];

/**
 * Create Sub-Organization
 *
 * Create a new Sub-Organization
 *
 * `POST /public/v1/submit/create_sub_organization`
 */
export const createSubOrganization = (input: TCreateSubOrganizationInput) =>
  request<
    TCreateSubOrganizationResponse,
    TCreateSubOrganizationBody,
    never,
    never,
    never
  >({
    uri: "/public/v1/submit/create_sub_organization",
    method: "POST",
    body: input.body,
  });

/**
 * Request a WebAuthn assertion and return a signed `CreateSubOrganization` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateSubOrganization}
 */
export const signCreateSubOrganization = (
  input: TCreateSubOrganizationInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  signedRequest<TCreateSubOrganizationBody, never, never>({
    uri: "/public/v1/submit/create_sub_organization",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/submit/create_user_tag`
 */
export type TCreateUserTagResponse =
  operations["PublicApiService_CreateUserTag"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/submit/create_user_tag`
 */
export type TCreateUserTagInput = { body: TCreateUserTagBody };

/**
 * `POST /public/v1/submit/create_user_tag`
 */
export type TCreateUserTagBody =
  operations["PublicApiService_CreateUserTag"]["parameters"]["body"]["body"];

/**
 * Create User Tag
 *
 * Create a user tag and add it to users.
 *
 * `POST /public/v1/submit/create_user_tag`
 */
export const createUserTag = (input: TCreateUserTagInput) =>
  request<TCreateUserTagResponse, TCreateUserTagBody, never, never, never>({
    uri: "/public/v1/submit/create_user_tag",
    method: "POST",
    body: input.body,
  });

/**
 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateUserTag}
 */
export const signCreateUserTag = (
  input: TCreateUserTagInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  signedRequest<TCreateUserTagBody, never, never>({
    uri: "/public/v1/submit/create_user_tag",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/submit/create_users`
 */
export type TCreateUsersResponse =
  operations["PublicApiService_CreateUsers"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/submit/create_users`
 */
export type TCreateUsersInput = { body: TCreateUsersBody };

/**
 * `POST /public/v1/submit/create_users`
 */
export type TCreateUsersBody =
  operations["PublicApiService_CreateUsers"]["parameters"]["body"]["body"];

/**
 * Create Users
 *
 * Create Users in an existing Organization
 *
 * `POST /public/v1/submit/create_users`
 */
export const createUsers = (input: TCreateUsersInput) =>
  request<TCreateUsersResponse, TCreateUsersBody, never, never, never>({
    uri: "/public/v1/submit/create_users",
    method: "POST",
    body: input.body,
  });

/**
 * Request a WebAuthn assertion and return a signed `CreateUsers` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateUsers}
 */
export const signCreateUsers = (
  input: TCreateUsersInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  signedRequest<TCreateUsersBody, never, never>({
    uri: "/public/v1/submit/create_users",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/submit/delete_api_keys`
 */
export type TDeleteApiKeysResponse =
  operations["PublicApiService_DeleteApiKeys"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/submit/delete_api_keys`
 */
export type TDeleteApiKeysInput = { body: TDeleteApiKeysBody };

/**
 * `POST /public/v1/submit/delete_api_keys`
 */
export type TDeleteApiKeysBody =
  operations["PublicApiService_DeleteApiKeys"]["parameters"]["body"]["body"];

/**
 * Delete API Keys
 *
 * Remove api keys from a User
 *
 * `POST /public/v1/submit/delete_api_keys`
 */
export const deleteApiKeys = (input: TDeleteApiKeysInput) =>
  request<TDeleteApiKeysResponse, TDeleteApiKeysBody, never, never, never>({
    uri: "/public/v1/submit/delete_api_keys",
    method: "POST",
    body: input.body,
  });

/**
 * Request a WebAuthn assertion and return a signed `DeleteApiKeys` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeleteApiKeys}
 */
export const signDeleteApiKeys = (
  input: TDeleteApiKeysInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  signedRequest<TDeleteApiKeysBody, never, never>({
    uri: "/public/v1/submit/delete_api_keys",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/submit/delete_authenticators`
 */
export type TDeleteAuthenticatorsResponse =
  operations["PublicApiService_DeleteAuthenticators"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/submit/delete_authenticators`
 */
export type TDeleteAuthenticatorsInput = { body: TDeleteAuthenticatorsBody };

/**
 * `POST /public/v1/submit/delete_authenticators`
 */
export type TDeleteAuthenticatorsBody =
  operations["PublicApiService_DeleteAuthenticators"]["parameters"]["body"]["body"];

/**
 * Delete Authenticators
 *
 * Remove authenticators from a User
 *
 * `POST /public/v1/submit/delete_authenticators`
 */
export const deleteAuthenticators = (input: TDeleteAuthenticatorsInput) =>
  request<
    TDeleteAuthenticatorsResponse,
    TDeleteAuthenticatorsBody,
    never,
    never,
    never
  >({
    uri: "/public/v1/submit/delete_authenticators",
    method: "POST",
    body: input.body,
  });

/**
 * Request a WebAuthn assertion and return a signed `DeleteAuthenticators` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeleteAuthenticators}
 */
export const signDeleteAuthenticators = (
  input: TDeleteAuthenticatorsInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  signedRequest<TDeleteAuthenticatorsBody, never, never>({
    uri: "/public/v1/submit/delete_authenticators",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/submit/delete_invitations`
 */
export type TDeleteInvitationResponse =
  operations["PublicApiService_DeleteInvitation"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/submit/delete_invitations`
 */
export type TDeleteInvitationInput = { body: TDeleteInvitationBody };

/**
 * `POST /public/v1/submit/delete_invitations`
 */
export type TDeleteInvitationBody =
  operations["PublicApiService_DeleteInvitation"]["parameters"]["body"]["body"];

/**
 * Delete Invitation
 *
 * Delete an existing Invitation
 *
 * `POST /public/v1/submit/delete_invitations`
 */
export const deleteInvitation = (input: TDeleteInvitationInput) =>
  request<
    TDeleteInvitationResponse,
    TDeleteInvitationBody,
    never,
    never,
    never
  >({
    uri: "/public/v1/submit/delete_invitations",
    method: "POST",
    body: input.body,
  });

/**
 * Request a WebAuthn assertion and return a signed `DeleteInvitation` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeleteInvitation}
 */
export const signDeleteInvitation = (
  input: TDeleteInvitationInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  signedRequest<TDeleteInvitationBody, never, never>({
    uri: "/public/v1/submit/delete_invitations",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/submit/delete_policy`
 */
export type TDeletePolicyResponse =
  operations["PublicApiService_DeletePolicy"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/submit/delete_policy`
 */
export type TDeletePolicyInput = { body: TDeletePolicyBody };

/**
 * `POST /public/v1/submit/delete_policy`
 */
export type TDeletePolicyBody =
  operations["PublicApiService_DeletePolicy"]["parameters"]["body"]["body"];

/**
 * Delete Policy
 *
 * Delete an existing Policy
 *
 * `POST /public/v1/submit/delete_policy`
 */
export const deletePolicy = (input: TDeletePolicyInput) =>
  request<TDeletePolicyResponse, TDeletePolicyBody, never, never, never>({
    uri: "/public/v1/submit/delete_policy",
    method: "POST",
    body: input.body,
  });

/**
 * Request a WebAuthn assertion and return a signed `DeletePolicy` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeletePolicy}
 */
export const signDeletePolicy = (
  input: TDeletePolicyInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  signedRequest<TDeletePolicyBody, never, never>({
    uri: "/public/v1/submit/delete_policy",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/submit/reject_activity`
 */
export type TRejectActivityResponse =
  operations["PublicApiService_RejectActivity"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/submit/reject_activity`
 */
export type TRejectActivityInput = { body: TRejectActivityBody };

/**
 * `POST /public/v1/submit/reject_activity`
 */
export type TRejectActivityBody =
  operations["PublicApiService_RejectActivity"]["parameters"]["body"]["body"];

/**
 * Reject Activity
 *
 * Reject an Activity
 *
 * `POST /public/v1/submit/reject_activity`
 */
export const rejectActivity = (input: TRejectActivityInput) =>
  request<TRejectActivityResponse, TRejectActivityBody, never, never, never>({
    uri: "/public/v1/submit/reject_activity",
    method: "POST",
    body: input.body,
  });

/**
 * Request a WebAuthn assertion and return a signed `RejectActivity` request, ready to be POSTed to Turnkey.
 *
 * See {@link RejectActivity}
 */
export const signRejectActivity = (
  input: TRejectActivityInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  signedRequest<TRejectActivityBody, never, never>({
    uri: "/public/v1/submit/reject_activity",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/submit/sign_raw_payload`
 */
export type TSignRawPayloadResponse =
  operations["PublicApiService_SignRawPayload"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/submit/sign_raw_payload`
 */
export type TSignRawPayloadInput = { body: TSignRawPayloadBody };

/**
 * `POST /public/v1/submit/sign_raw_payload`
 */
export type TSignRawPayloadBody =
  operations["PublicApiService_SignRawPayload"]["parameters"]["body"]["body"];

/**
 * Sign Raw Payload
 *
 * Sign a raw payload with a Private Key
 *
 * `POST /public/v1/submit/sign_raw_payload`
 */
export const signRawPayload = (input: TSignRawPayloadInput) =>
  request<TSignRawPayloadResponse, TSignRawPayloadBody, never, never, never>({
    uri: "/public/v1/submit/sign_raw_payload",
    method: "POST",
    body: input.body,
  });

/**
 * Request a WebAuthn assertion and return a signed `SignRawPayload` request, ready to be POSTed to Turnkey.
 *
 * See {@link SignRawPayload}
 */
export const signSignRawPayload = (
  input: TSignRawPayloadInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  signedRequest<TSignRawPayloadBody, never, never>({
    uri: "/public/v1/submit/sign_raw_payload",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/submit/sign_transaction`
 */
export type TSignTransactionResponse =
  operations["PublicApiService_SignTransaction"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/submit/sign_transaction`
 */
export type TSignTransactionInput = { body: TSignTransactionBody };

/**
 * `POST /public/v1/submit/sign_transaction`
 */
export type TSignTransactionBody =
  operations["PublicApiService_SignTransaction"]["parameters"]["body"]["body"];

/**
 * Sign Transaction
 *
 * Sign a transaction with a Private Key
 *
 * `POST /public/v1/submit/sign_transaction`
 */
export const signTransaction = (input: TSignTransactionInput) =>
  request<TSignTransactionResponse, TSignTransactionBody, never, never, never>({
    uri: "/public/v1/submit/sign_transaction",
    method: "POST",
    body: input.body,
  });

/**
 * Request a WebAuthn assertion and return a signed `SignTransaction` request, ready to be POSTed to Turnkey.
 *
 * See {@link SignTransaction}
 */
export const signSignTransaction = (
  input: TSignTransactionInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  signedRequest<TSignTransactionBody, never, never>({
    uri: "/public/v1/submit/sign_transaction",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/submit/update_allowed_origins`
 */
export type TUpdateAllowedOriginsResponse =
  operations["PublicApiService_UpdateAllowedOrigins"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/submit/update_allowed_origins`
 */
export type TUpdateAllowedOriginsInput = { body: TUpdateAllowedOriginsBody };

/**
 * `POST /public/v1/submit/update_allowed_origins`
 */
export type TUpdateAllowedOriginsBody =
  operations["PublicApiService_UpdateAllowedOrigins"]["parameters"]["body"]["body"];

/**
 * Update Allowable Origins
 *
 * Update the allowable origins for credentials and requests
 *
 * `POST /public/v1/submit/update_allowed_origins`
 */
export const updateAllowedOrigins = (input: TUpdateAllowedOriginsInput) =>
  request<
    TUpdateAllowedOriginsResponse,
    TUpdateAllowedOriginsBody,
    never,
    never,
    never
  >({
    uri: "/public/v1/submit/update_allowed_origins",
    method: "POST",
    body: input.body,
  });

/**
 * Request a WebAuthn assertion and return a signed `UpdateAllowedOrigins` request, ready to be POSTed to Turnkey.
 *
 * See {@link UpdateAllowedOrigins}
 */
export const signUpdateAllowedOrigins = (
  input: TUpdateAllowedOriginsInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  signedRequest<TUpdateAllowedOriginsBody, never, never>({
    uri: "/public/v1/submit/update_allowed_origins",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/submit/update_policy`
 */
export type TUpdatePolicyResponse =
  operations["PublicApiService_UpdatePolicy"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/submit/update_policy`
 */
export type TUpdatePolicyInput = { body: TUpdatePolicyBody };

/**
 * `POST /public/v1/submit/update_policy`
 */
export type TUpdatePolicyBody =
  operations["PublicApiService_UpdatePolicy"]["parameters"]["body"]["body"];

/**
 * Update Policy
 *
 * Update an existing Policy
 *
 * `POST /public/v1/submit/update_policy`
 */
export const updatePolicy = (input: TUpdatePolicyInput) =>
  request<TUpdatePolicyResponse, TUpdatePolicyBody, never, never, never>({
    uri: "/public/v1/submit/update_policy",
    method: "POST",
    body: input.body,
  });

/**
 * Request a WebAuthn assertion and return a signed `UpdatePolicy` request, ready to be POSTed to Turnkey.
 *
 * See {@link UpdatePolicy}
 */
export const signUpdatePolicy = (
  input: TUpdatePolicyInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  signedRequest<TUpdatePolicyBody, never, never>({
    uri: "/public/v1/submit/update_policy",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/submit/update_private_key_tag`
 */
export type TUpdatePrivateKeyTagResponse =
  operations["PublicApiService_UpdatePrivateKeyTag"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/submit/update_private_key_tag`
 */
export type TUpdatePrivateKeyTagInput = { body: TUpdatePrivateKeyTagBody };

/**
 * `POST /public/v1/submit/update_private_key_tag`
 */
export type TUpdatePrivateKeyTagBody =
  operations["PublicApiService_UpdatePrivateKeyTag"]["parameters"]["body"]["body"];

/**
 * Update Private Key Tag
 *
 * Update human-readable name or associated private keys. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.
 *
 * `POST /public/v1/submit/update_private_key_tag`
 */
export const updatePrivateKeyTag = (input: TUpdatePrivateKeyTagInput) =>
  request<
    TUpdatePrivateKeyTagResponse,
    TUpdatePrivateKeyTagBody,
    never,
    never,
    never
  >({
    uri: "/public/v1/submit/update_private_key_tag",
    method: "POST",
    body: input.body,
  });

/**
 * Request a WebAuthn assertion and return a signed `UpdatePrivateKeyTag` request, ready to be POSTed to Turnkey.
 *
 * See {@link UpdatePrivateKeyTag}
 */
export const signUpdatePrivateKeyTag = (
  input: TUpdatePrivateKeyTagInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  signedRequest<TUpdatePrivateKeyTagBody, never, never>({
    uri: "/public/v1/submit/update_private_key_tag",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/submit/update_root_quorum`
 */
export type TUpdateRootQuorumResponse =
  operations["PublicApiService_UpdateRootQuorum"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/submit/update_root_quorum`
 */
export type TUpdateRootQuorumInput = { body: TUpdateRootQuorumBody };

/**
 * `POST /public/v1/submit/update_root_quorum`
 */
export type TUpdateRootQuorumBody =
  operations["PublicApiService_UpdateRootQuorum"]["parameters"]["body"]["body"];

/**
 * Update Root Quorum
 *
 * Set the threshold and members of the root quorum. This must be approved by the current root quorum.
 *
 * `POST /public/v1/submit/update_root_quorum`
 */
export const updateRootQuorum = (input: TUpdateRootQuorumInput) =>
  request<
    TUpdateRootQuorumResponse,
    TUpdateRootQuorumBody,
    never,
    never,
    never
  >({
    uri: "/public/v1/submit/update_root_quorum",
    method: "POST",
    body: input.body,
  });

/**
 * Request a WebAuthn assertion and return a signed `UpdateRootQuorum` request, ready to be POSTed to Turnkey.
 *
 * See {@link UpdateRootQuorum}
 */
export const signUpdateRootQuorum = (
  input: TUpdateRootQuorumInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  signedRequest<TUpdateRootQuorumBody, never, never>({
    uri: "/public/v1/submit/update_root_quorum",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/submit/update_user`
 */
export type TUpdateUserResponse =
  operations["PublicApiService_UpdateUser"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/submit/update_user`
 */
export type TUpdateUserInput = { body: TUpdateUserBody };

/**
 * `POST /public/v1/submit/update_user`
 */
export type TUpdateUserBody =
  operations["PublicApiService_UpdateUser"]["parameters"]["body"]["body"];

/**
 * Update User
 *
 * Update a User in an existing Organization
 *
 * `POST /public/v1/submit/update_user`
 */
export const updateUser = (input: TUpdateUserInput) =>
  request<TUpdateUserResponse, TUpdateUserBody, never, never, never>({
    uri: "/public/v1/submit/update_user",
    method: "POST",
    body: input.body,
  });

/**
 * Request a WebAuthn assertion and return a signed `UpdateUser` request, ready to be POSTed to Turnkey.
 *
 * See {@link UpdateUser}
 */
export const signUpdateUser = (
  input: TUpdateUserInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  signedRequest<TUpdateUserBody, never, never>({
    uri: "/public/v1/submit/update_user",
    body: input.body,
    options,
  });

/**
 * `POST /public/v1/submit/update_user_tag`
 */
export type TUpdateUserTagResponse =
  operations["PublicApiService_UpdateUserTag"]["responses"]["200"]["schema"];

/**
 * `POST /public/v1/submit/update_user_tag`
 */
export type TUpdateUserTagInput = { body: TUpdateUserTagBody };

/**
 * `POST /public/v1/submit/update_user_tag`
 */
export type TUpdateUserTagBody =
  operations["PublicApiService_UpdateUserTag"]["parameters"]["body"]["body"];

/**
 * Update User Tag
 *
 * Update human-readable name or associated users. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.
 *
 * `POST /public/v1/submit/update_user_tag`
 */
export const updateUserTag = (input: TUpdateUserTagInput) =>
  request<TUpdateUserTagResponse, TUpdateUserTagBody, never, never, never>({
    uri: "/public/v1/submit/update_user_tag",
    method: "POST",
    body: input.body,
  });

/**
 * Request a WebAuthn assertion and return a signed `UpdateUserTag` request, ready to be POSTed to Turnkey.
 *
 * See {@link UpdateUserTag}
 */
export const signUpdateUserTag = (
  input: TUpdateUserTagInput,
  options?: TurnkeyCredentialRequestOptions
) =>
  signedRequest<TUpdateUserTagBody, never, never>({
    uri: "/public/v1/submit/update_user_tag",
    body: input.body,
    options,
  });

/**
 * `POST /tkhq/api/v1/noop-codegen-anchor`
 */
export type TNOOPCodegenAnchorResponse =
  operations["PublicApiService_NOOPCodegenAnchor"]["responses"]["200"]["schema"];

/**
 * `POST /tkhq/api/v1/noop-codegen-anchor`
 */
export const nOOPCodegenAnchor = () =>
  request<TNOOPCodegenAnchorResponse, never, never, never, never>({
    uri: "/tkhq/api/v1/noop-codegen-anchor",
    method: "POST",
  });

/**
 * Request a WebAuthn assertion and return a signed `NOOPCodegenAnchor` request, ready to be POSTed to Turnkey.
 *
 * See {@link NOOPCodegenAnchor}
 */
export const signNOOPCodegenAnchor = () =>
  signedRequest<never, never, never>({
    uri: "/tkhq/api/v1/noop-codegen-anchor",
  });
